// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationId String[]       @db.ObjectId
  conversation   Conversation[] @relation(fields: [conversationId], references: [id])

  seenMessageId String[]  @db.ObjectId
  seenMesage    Message[] @relation("Seen", fields: [seenMessageId], references: [id])

  accounts Account[]
  message  Message[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  exipres_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messageId String[]  @db.ObjectId
  message   Message[]

  userId String[] @db.ObjectId
  user   User[]   @relation(fields: [userId], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenId String[] @db.ObjectId
  seen   User[]   @relation("Seen", fields: [seenId], references: [id])

  User           User?         @relation(fields: [userId], references: [id])
  userId         String?       @db.ObjectId
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?       @db.ObjectId
}
